define(["./when-0ac5fc51","./Cartesian2-21667d02","./ArcType-13c64291","./Transforms-9663aff8","./Color-6d8f57e2","./ComponentDatatype-a350450f","./Check-91887fdf","./GeometryAttribute-95829fb2","./GeometryAttributes-49ce162f","./IndexDatatype-14fcdf85","./Math-e1584698","./PolylinePipeline-8d8b2828","./combine-323053a8","./RuntimeError-71e5ac17","./WebGLConstants-dd197df0","./EllipsoidGeodesic-5a7a5804","./EllipsoidRhumbLine-6713e1b6","./IntersectionTests-249faccb","./Plane-ab509945"],function(L,V,x,S,I,R,e,O,M,U,N,F,o,t,r,a,l,i,n){"use strict";function f(e){var o=(e=L.defaultValue(e,L.defaultValue.EMPTY_OBJECT)).positions,t=e.colors,r=L.defaultValue(e.colorsPerVertex,!1);this._positions=o,this._colors=t,this._colorsPerVertex=r,this._arcType=L.defaultValue(e.arcType,x.ArcType.GEODESIC),this._granularity=L.defaultValue(e.granularity,N.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=L.defaultValue(e.ellipsoid,V.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";o=1+o.length*V.Cartesian3.packedLength;o+=L.defined(t)?1+t.length*I.Color.packedLength:1,this.packedLength=o+V.Ellipsoid.packedLength+3}f.pack=function(e,o,t){var r;t=L.defaultValue(t,0);var a=e._positions,l=a.length;for(o[t++]=l,r=0;r<l;++r,t+=V.Cartesian3.packedLength)V.Cartesian3.pack(a[r],o,t);var i=e._colors,l=L.defined(i)?i.length:0;for(o[t++]=l,r=0;r<l;++r,t+=I.Color.packedLength)I.Color.pack(i[r],o,t);return V.Ellipsoid.pack(e._ellipsoid,o,t),t+=V.Ellipsoid.packedLength,o[t++]=e._colorsPerVertex?1:0,o[t++]=e._arcType,o[t]=e._granularity,o},f.unpack=function(e,o,t){o=L.defaultValue(o,0);for(var r=e[o++],a=new Array(r),l=0;l<r;++l,o+=V.Cartesian3.packedLength)a[l]=V.Cartesian3.unpack(e,o);var i=0<(r=e[o++])?new Array(r):void 0;for(l=0;l<r;++l,o+=I.Color.packedLength)i[l]=I.Color.unpack(e,o);var n=V.Ellipsoid.unpack(e,o);o+=V.Ellipsoid.packedLength;var s=1===e[o++],p=e[o++],d=e[o];return L.defined(t)?(t._positions=a,t._colors=i,t._ellipsoid=n,t._colorsPerVertex=s,t._arcType=p,t._granularity=d,t):new f({positions:a,colors:i,ellipsoid:n,colorsPerVertex:s,arcType:p,granularity:d})};var H=new Array(2),W=new Array(2),Y={positions:H,height:W,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return f.createGeometry=function(e){var o=e._positions,t=e._colors,r=e._colorsPerVertex,a=e._arcType,l=e._granularity,e=e._ellipsoid,i=N.CesiumMath.chordLength(l,e.maximumRadius),n=L.defined(t)&&!r,s=o.length,p=0;if(a===x.ArcType.GEODESIC||a===x.ArcType.RHUMB){var d,f,c=a===x.ArcType.GEODESIC?(d=N.CesiumMath.chordLength(l,e.maximumRadius),f=F.PolylinePipeline.numberOfPoints,F.PolylinePipeline.generateArc):(d=l,f=F.PolylinePipeline.numberOfPointsRhumbLine,F.PolylinePipeline.generateRhumbArc),y=F.PolylinePipeline.extractHeights(o,e),u=Y;if(a===x.ArcType.GEODESIC?u.minDistance=i:u.granularity=l,u.ellipsoid=e,n){for(var h=0,C=0;C<s-1;C++)h+=f(o[C],o[C+1],d)+1;B=new Float64Array(3*h),A=new Uint8Array(4*h),u.positions=H,u.height=W;var T=0;for(C=0;C<s-1;++C){H[0]=o[C],H[1]=o[C+1],W[0]=y[C],W[1]=y[C+1];var g=c(u);if(L.defined(t))for(var m=g.length/3,P=t[C],_=0;_<m;++_)A[T++]=I.Color.floatToByte(P.red),A[T++]=I.Color.floatToByte(P.green),A[T++]=I.Color.floatToByte(P.blue),A[T++]=I.Color.floatToByte(P.alpha);B.set(g,p),p+=g.length}}else if(u.positions=o,u.height=y,B=new Float64Array(c(u)),L.defined(t)){for(A=new Uint8Array(B.length/3*4),C=0;C<s-1;++C)p=function(e,o,t,r,a,l,i){var n=F.PolylinePipeline.numberOfPoints(e,o,a),s=t.red,p=t.green,d=t.blue,f=t.alpha,c=r.red,e=r.green,o=r.blue,a=r.alpha;if(I.Color.equals(t,r)){for(g=0;g<n;g++)l[i++]=I.Color.floatToByte(s),l[i++]=I.Color.floatToByte(p),l[i++]=I.Color.floatToByte(d),l[i++]=I.Color.floatToByte(f);return i}for(var y=(c-s)/n,u=(e-p)/n,h=(o-d)/n,C=(a-f)/n,T=i,g=0;g<n;g++)l[T++]=I.Color.floatToByte(s+g*y),l[T++]=I.Color.floatToByte(p+g*u),l[T++]=I.Color.floatToByte(d+g*h),l[T++]=I.Color.floatToByte(f+g*C);return T}(o[C],o[C+1],t[C],t[C+1],i,A,p);var v=t[s-1];A[p++]=I.Color.floatToByte(v.red),A[p++]=I.Color.floatToByte(v.green),A[p++]=I.Color.floatToByte(v.blue),A[p++]=I.Color.floatToByte(v.alpha)}}else{var b=n?2*s-2:s,B=new Float64Array(3*b),A=L.defined(t)?new Uint8Array(4*b):void 0,E=0,k=0;for(C=0;C<s;++C){var G=o[C];if(n&&0<C&&(V.Cartesian3.pack(G,B,E),E+=3,P=t[C-1],A[k++]=I.Color.floatToByte(P.red),A[k++]=I.Color.floatToByte(P.green),A[k++]=I.Color.floatToByte(P.blue),A[k++]=I.Color.floatToByte(P.alpha)),n&&C===s-1)break;V.Cartesian3.pack(G,B,E),E+=3,L.defined(t)&&(P=t[C],A[k++]=I.Color.floatToByte(P.red),A[k++]=I.Color.floatToByte(P.green),A[k++]=I.Color.floatToByte(P.blue),A[k++]=I.Color.floatToByte(P.alpha))}}v=new M.GeometryAttributes;v.position=new O.GeometryAttribute({componentDatatype:R.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:B}),L.defined(t)&&(v.color=new O.GeometryAttribute({componentDatatype:R.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:A,normalize:!0})),b=B.length/3;var w=U.IndexDatatype.createTypedArray(b,2*(b-1)),D=0;for(C=0;C<b-1;++C)w[D++]=C,w[D++]=C+1;return new O.Geometry({attributes:v,indices:w,primitiveType:O.PrimitiveType.LINES,boundingSphere:S.BoundingSphere.fromPoints(o)})},function(e,o){return(e=L.defined(o)?f.unpack(e,o):e)._ellipsoid=V.Ellipsoid.clone(e._ellipsoid),f.createGeometry(e)}});
